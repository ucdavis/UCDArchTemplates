<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Data.Linq.Mapping" #>
<#@ import namespace="System.Data.Objects.DataClasses" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#
MvcTextTemplateHost mvcHost = (MvcTextTemplateHost)(Host);
#>
@model IEnumerable<#= "<" + mvcHost.ViewDataTypeName + ">" #>
<#
// The following chained if-statement outputs the file header code and markup for a partial view, a content page, or a regular view.
if(mvcHost.IsPartialView) {
#>

<#
} else if(mvcHost.IsContentPage) {
#>

@{
	ViewBag.Title = "<#= mvcHost.ViewName#>";
<#
if (!String.IsNullOrEmpty(mvcHost.MasterPageFile)) {
#>
	Layout = "<#= mvcHost.MasterPageFile#>";
<#
}
#>
}

<h2><#= mvcHost.ViewName#></h2>

<#
} else {
#>

@{
	Layout = null;
}

<!DOCTYPE html>

<html>
<head>
	<title><#= mvcHost.ViewName #></title>
</head>
<body>
<#
	PushIndent("    ");
}
#>

@Styles.Render("~/Content/DataTables-1.9.4/media/css/dataTables")

@section SubNav
{
	<li>@Html.ActionLink("Create New", "Create")</li>
}

<# List<ModelProperty> properties = GetModelProperties(mvcHost.ViewDataType); #>
@section AdditionalScripts
{
    @Scripts.Render("~/bundles/datatables")

    <script type="text/javascript">
        $(function () {
            $(".table").dataTable({
                "aaSorting": [[ 1, "asc" ]], //Default sort on second column
                "aoColumnDefs": [
                    { 'bSortable': false, 'aTargets': [0, <#= properties.Where(p=>!p.IsPrimaryKey).Count() + 1 #>] } //Disables sort on icon columns
                ]
            });
        });
    </script>    
}


<table class="table table-striped table-bordered table-hover">
	<thead>
		<tr>
			<th></th>
<#
foreach (ModelProperty property in properties) {
	if (!property.IsPrimaryKey) {
#>
			<th>
				<#= property.Name #>
			</th>
<#
	}
}
#>
			<th></th>
		</tr>
	</thead>
	<tbody>
@foreach (var item in Model) {
		<tr>
<#
string pkName = GetPrimaryKeyName(mvcHost.ViewDataType);
if (pkName != null) {
#>
			<td>
				<a href='@Url.Action("Details", new {id=item.Id})' class="btn" title="Details"><i class="icon-file"></i></a>
				<a href='@Url.Action("Edit", new {id=item.Id})' class="btn" title="Edit"><i class="icon-edit"></i></a>
			</td>
<#
} else {
#>
			<td>
				<a href='@Url.Action("Details", new { /* id=item.<#=pkName #> */ })' class="btn" title="Details"><i class="icon-file"></i></a>
				<a href='@Url.Action("Edit", new { /* id=item.<#= pkName #> */ })' class="btn" title="Edit"><i class="icon-edit"></i></a>
			</td>
<#
}
	
foreach (ModelProperty property in properties) {
	if (!property.IsPrimaryKey) {
#>
			<td>
				@<#= property.ValueExpression.Replace("Model.", "item.") #>
			</td>
<#
	}
}
#>
<#
if (pkName != null) {
#>
			<td>
				<a href='@Url.Action("Delete", new {id=item.Id})' class="btn" title="Remove"><i class="icon-remove"></i></a>
			</td>
<#
} else {
#>
			<td>
				<a href='@Url.Action("Delete", new { /* id = item.<#= pkName #> */ })' class="btn" title="Remove"><i class="icon-remove"></i></a>
			</td>
<#
}
#>
		</tr>
}
	</tbody>
</table>
<#
// The following code closes the asp:Content tag used in the case of a master page and the body and html tags in the case of a regular view page
#>
<#
if(mvcHost.IsContentPage) {
#>
<#
} else if(!mvcHost.IsPartialView && !mvcHost.IsContentPage) {
	ClearIndent();
#>
</body>
</html>
<#
}
#>

<#+
// Describes the information about a property on the model
class ModelProperty {
	public string Name { get; set; }
	public string ValueExpression { get; set; }
	public Type UnderlyingType { get; set; }
	public bool IsPrimaryKey { get; set; }
	public bool IsReadOnly { get; set; }
}

// Change this list to include any non-primitive types you think should be eligible for display/edit
static Type[] bindableNonPrimitiveTypes = new[] {
	typeof(string),
	typeof(decimal),
	typeof(Guid),
	typeof(DateTime),
	typeof(DateTimeOffset),
	typeof(TimeSpan),
};

// Call this to get the list of properties in the model. Change this to modify or add your
// own default formatting for display values.
List<ModelProperty> GetModelProperties(Type type) {
	List<ModelProperty> results = GetEligibleProperties(type);
	
	foreach (ModelProperty prop in results) {
		if (prop.UnderlyingType == typeof(double) || prop.UnderlyingType == typeof(decimal)) {
			prop.ValueExpression = "String.Format(\"{0:F}\", " + prop.ValueExpression + ")";
		}
		else if (prop.UnderlyingType == typeof(DateTime)) {
			prop.ValueExpression = "String.Format(\"{0:g}\", " + prop.ValueExpression + ")";
		}
	}

	return results;
}

// Call this to determine if the property represents a primary key. Change the
// code to change the definition of primary key.
bool IsPrimaryKey(PropertyInfo property) {
	if (string.Equals(property.Name, "id", StringComparison.OrdinalIgnoreCase)) {  // EF Code First convention
		return true;
	}

	if (string.Equals(property.Name, property.DeclaringType.Name + "id", StringComparison.OrdinalIgnoreCase)) {  // EF Code First convention
		return true;
	}

	foreach (object attribute in property.GetCustomAttributes(true)) {
		if (attribute is KeyAttribute) {  // WCF RIA Services and EF Code First explicit
			return true;
		}
		
		var edmScalar = attribute as EdmScalarPropertyAttribute;
		if (edmScalar != null && edmScalar.EntityKeyProperty) {  // EF traditional
			return true;
		}

		var column = attribute as ColumnAttribute;
		if (column != null && column.IsPrimaryKey) {  // LINQ to SQL
			return true;
		}
	}
	
	return false;
}

// This will return the primary key property name, if and only if there is exactly
// one primary key. Returns null if there is no PK, or the PK is composite.
string GetPrimaryKeyName(Type type) {
	IEnumerable<string> pkNames = GetPrimaryKeyNames(type);
	return pkNames.Count() == 1 ? pkNames.First() : null;
}

// This will return all the primary key names. Will return an empty list if there are none.
IEnumerable<string> GetPrimaryKeyNames(Type type) {
	return GetEligibleProperties(type).Where(mp => mp.IsPrimaryKey).Select(mp => mp.Name);
}

// Helper
List<ModelProperty> GetEligibleProperties(Type type) {
	List<ModelProperty> results = new List<ModelProperty>();

	foreach (PropertyInfo prop in type.GetProperties(BindingFlags.Public | BindingFlags.Instance)) {
		Type underlyingType = Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType;
		if (prop.GetGetMethod() != null && prop.GetIndexParameters().Length == 0 && IsBindableType(underlyingType)) {
			results.Add(new ModelProperty {
				Name = prop.Name,
				ValueExpression = "Model." + prop.Name,
				UnderlyingType = underlyingType,
				IsPrimaryKey = IsPrimaryKey(prop),
				IsReadOnly = prop.GetSetMethod() == null
			});
		}
	}

	return results;
}

// Helper
bool IsBindableType(Type type) {
	return type.IsPrimitive || bindableNonPrimitiveTypes.Contains(type);
}
#>